// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id    String @id @default(uuid())
  email String @unique

  password     String
  registeredAt DateTime  @default(now())
  lastLoginAt  DateTime?

  user User?
}

model User {
  account UserAccount @relation(fields: [id], references: [id], onDelete: Cascade)
  id      String      @id @unique

  name    String
  address String
  points  Float  @default(0)

  reportedLitter    LitterSite[]        @relation("reportedLitter")
  collectedLitter   LitterSite[]        @relation("collectedLitter")
  RewardTransaction RewardTransaction[]
  PointChange       PointChange[]
}

model MunicipalityAccount {
  id    String @id @default(uuid())
  email String @unique

  password     String
  registeredAt DateTime  @default(now())
  lastLoginAt  DateTime?

  municipality Municipality?
}

model Municipality {
  account MunicipalityAccount @relation(fields: [id], references: [id], onDelete: Cascade)
  id      String              @id @unique

  name        String
  phoneNumber String

  regions       Region[]
  disposalSites DisposalSite[]
}

model Region {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  municipality   Municipality  @relation(fields: [municipalityId], references: [id], onDelete: Cascade)
  municipalityId String
  points         RegionPoint[]
}

model RegionPoint {
  id String @id @default(uuid())

  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  region   Region @relation(fields: [regionId], references: [id], onDelete: Cascade)
  regionId String

  @@index([latitude, longitude])
}

model DisposalSite {
  id String @id @default(uuid())

  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)
  municipalityId String

  @@index([latitude, longitude])
}

enum HarmLevel {
  HAZARDOUS
  CAUTION
  NONE
}

model LitterSite {
  id String @id @default(uuid())

  isCollected Boolean   @default(false)
  litterCount Int
  image       Bytes
  harm        HarmLevel @default(NONE)
  description String
  latitude    Float
  longitude   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  reporterUser    User    @relation("reportedLitter", fields: [reporterUserId], references: [id])
  reporterUserId  String
  collectorUser   User?   @relation("collectedLitter", fields: [collectorUserId], references: [id])
  collectorUserId String?

  @@index([latitude, longitude])
}

model Reward {
  id String @id @default(uuid())

  name        String
  cost        Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  RewardTransaction RewardTransaction[]
}

model RewardTransaction {
  id String @id @default(uuid())

  rewardCost Float
  madeAt     DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  reward   Reward @relation(fields: [rewardId], references: [id])
  rewardId String
}

model PointChange {
  id String @id @default(uuid())

  amount    Float
  occuredAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
