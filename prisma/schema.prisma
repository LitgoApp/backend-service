// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String              @id @default(uuid()) // TODO: Separate credentials into UserAccount model
  email             String              @unique
  name              String
  password          String
  points            Float               @default(0)
  address           String
  reportedLitter    LitterSite[]        @relation("reportedLitter")
  collectedLitter   LitterSite[]        @relation("collectedLitter")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  RewardTransaction RewardTransaction[]
  PointChange       PointChange[]
}

model Municipality {
  municipalityId String         @id @default(uuid()) // TODO: Separate credentials into Municipality model
  email          String         @unique
  name           String
  password       String
  phoneNumber    String
  regions        Region[]
  disposalSites  DisposalSite[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Region {
  regionId       String        @id @default(uuid())
  municipality   Municipality  @relation(fields: [municipalityId], references: [municipalityId], onDelete: Cascade)
  municipalityId String
  points         RegionPoint[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model RegionPoint {
  regionPointId String   @id @default(uuid())
  region        Region   @relation(fields: [regionId], references: [regionId], onDelete: Cascade)
  regionId      String
  latitude      Float
  longitude     Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([latitude, longitude])
}

model DisposalSite {
  disposalSiteId String       @id @default(uuid())
  municipality   Municipality @relation(fields: [municipalityId], references: [municipalityId], onDelete: Cascade)
  municipalityId String
  latitude       Float
  longitude      Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([latitude, longitude])
}

enum HarmLevel {
  HAZARDOUS
  CAUTION
  NONE
}

model LitterSite {
  litterSiteId    String    @id @default(uuid())
  reporterUser    User      @relation("reportedLitter", fields: [reporterUserId], references: [userId])
  reporterUserId  String
  collectorUser   User?     @relation("collectedLitter", fields: [collectorUserId], references: [userId])
  collectorUserId String?
  isCollected     Boolean   @default(false)
  litterCount     Int
  image           Bytes
  harm            HarmLevel @default(NONE)
  description     String
  latitude        Float
  longitude       Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([latitude, longitude])
}

model Reward {
  rewardId          String              @id @default(uuid())
  name              String
  cost              Int
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  RewardTransaction RewardTransaction[]
}

model RewardTransaction {
  rewardTransactionId String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [userId])
  userId              String
  reward              Reward   @relation(fields: [rewardId], references: [rewardId])
  rewardId            String
  madeAt              DateTime @default(now())
}

model PointChange {
  pointChangeId String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        String
  amount        Float
  occuredAt     DateTime @default(now())
}
